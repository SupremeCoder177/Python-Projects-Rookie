"""
The idea to make this app originated simply from
the need of wanting dummy data to practise
data analytics on, I simply wanted a tool
to generate dummy data to play around with


The theme colors were generated by coolors.co


Contributors:
@SupremeCoder177 - github.com (Username)
"""

# main file to handle all the API of this app

import customtkinter as ctk
from json import load
from csv import writer
from darkdetect import isDark
from utils.console import Console
from utils.tableView import TableView
from utils.mainPanel import MainPanel
from utils.animations import Animations
from utils.sidePanel import SidePanel
from utils.generator import DataGenerator
from tkinter import filedialog, messagebox
import threading


# main app class
class App(ctk.CTk):

	# initializing the window and its components
	def __init__(self):

		if self.load_data():
			print("Settings loaded sucessfully, loading components...")
		else:
			print("Couldn't load settings, exiting...")
			return

		# initializing tkinter and settings title
		super().__init__()
		self.title("CSV Data Generator")

		# variables
		self.theme = "light" # usually I go with the dark theme mode as default, but this apps light mode is really good :)
		self.data = []

		ctk.set_appearance_mode(self.theme)

		# settings the theme, if the them file is not present, then using default customtkiner themes
		try:
			ctk.set_default_color_theme("settings/theme.json")
			print("sucessfully set custom theme")
		except FileNotFoundError as e:
			print("Couldn't load theme settings")

		# setting window dimensions and position
		x = (self.winfo_screenwidth() - self.settings["app_size"][0]) // 2
		y = (self.winfo_screenheight() - self.settings["app_size"][1]) // 2
		self.geometry(f"{self.settings["app_size"][0]}x{self.settings["app_size"][1]}+{x}+{y}")

		# adding widgets

		# adding the console
		self.console = Console(self, self.settings)

		# adding the table view
		self.view = TableView(self, self.settings)

		# adding the side panel
		self.side_panel = SidePanel(self, self.settings, self.console)

		# adding the main panel
		self.main_panel = MainPanel(self, self.settings, self.console)

		# adding the generator (not a GUI component)
		self.generator = DataGenerator(self.console, self)

		# raising the side_panel above the main panel
		self.side_panel.tkraise()

		# adding a theme toggle button
		ctk.CTkButton(self,
			text = "T",
			command = self.theme_toggle,
			corner_radius = 0).place(relx = 0.95, rely = 0.95, relwidth = 0.05, relheight = 0.05)

		# event bindings
		self.bind("<Escape>", lambda event: self.side_panel.move() if self.side_panel.is_shown() else None)
		self.bind("<Alt-Escape>", lambda event: self.quit_app())

		self.mainloop()

	# animates the console with a generating... text animation
	def animate_generation(self):
		Animations().animate_text(self.console, "Generating",  "Generating.........", ".", 2000)

	# aniimates the console with a saving.... text animation
	def animate_saving(self):
		Animations().animate_text(self.console, "Saving", "Saving.........", ".", 2000)

	# adds a thread to the active threads
	def add_thread(self, target, *args, **kwargs) -> threading.Thread:
		temp = threading.Thread(target = target, args = args, kwargs = kwargs)
		temp.daemon = True
		return temp

	# prompts the user if they want to close the app
	# if some background threads are still running
	# else just quit normally
	def quit_app(self):
		if threading.active_count() == 1:
			self.quit()
		else:
			if messagebox.askokcancel(title = "Are you Sure?",message = "Some background tasks are still running, do you still wanna quit?"): self.quit()

	# loads the json file which contains the app settings
	# the app will not start if the json file is missing
	# or the file doesn't have the necessary settings for the
	# app to function
	def load_data(self) -> bool:
		try:
			with open("settings/settings.json", "r") as f:
				self.settings = load(f)
			return True
		except FileNotFoundError as e:
			return False

	# function to change the theme of the app from light to dark mode, or vice-versa
	def theme_toggle(self) -> None:
		self.theme = "dark" if self.theme == "light" else "light"
		ctk.set_appearance_mode(self.theme)

	# retrives the data from the side panel and adds
	# it to the main panel
	def add_column_to_main(self) -> None:
		data = self.side_panel.get_data()
		if data:
			if data["type"] != "Number" and data["lower"] <= 0:
				self.console.set_text("Lower cannot be negative !", 2000, "Please set lower to a posittive value")
				return

			if not self.main_panel.add_column(data["name"], data["type"], data["lower"], data["upper"]):
				self.console.set_text("This Column Already Exists !", 2000, "Change Column Name")
		else:
			self.console.display_warning()

	# this function calls all the sub functions for data generation and 
	# displaying on the treeview
	# it also throws error on the console
	# if any errors occur
	def start_generation(self) -> None:
		# getting the amount of rows the user 
		# wants to generate

		dialog = ctk.CTkInputDialog(text = "How many rows do you want in the file ?", title = "Input")
		text = dialog.get_input()

		# trying to see if the user entered valid amount of rows
		num_rows = 0
		try:
			num_rows = int(text)
		except ValueError as e:
			self.console.display_warning()
			return

		if num_rows <= 0:
			self.console.set_text("Please enter a positive value !", 2000, "Try again !")
			return

		headings_data = self.main_panel.get_column_data()
		temp = self.add_thread(self.generator.gen_data, headings_data, num_rows)
		temp.start()
		while temp.is_alive():
			self.after(100, self.animate_generation)
		self.display_data_on_table()
		self.console.set_text("Done !", 2000, "You can now save the data :)")

	# gets the data from the generator and displays it on the table view
	def display_data_on_table(self) -> None:
		self.view.reset()
		data = self.generator.get_data()

		for row in data:
			self.view.add_row(row)

	# this function retrives data from the generator
	# and starts saving it in to the filename provided
	def begin_saving(self, path : str) -> None:
		data = self.generator.get_data()
		with open(path, "w", newline = '') as f:
			my_writer = writer(f, delimiter = ',')
			for row in data:
				my_writer.writerow(row)

	# prompts the user for a file name
	# and then saves the file in a .csv format
	def save(self) -> None:
		path_to_file = filedialog.asksaveasfilename()

		if not path_to_file:
			self.console.set_text("No file name entered !", 2000, "")
			return

		if not path_to_file.endswith(".csv"):
			path_to_file += ".csv"

		temp = self.add_thread(self.begin_saving, path_to_file)
		temp.start()
		while temp.is_alive():
			self.after(100, self.animate_saving)
		self.console.set_text("File Saved !", 2000, "You can view it in excel now :)")



if __name__ == "__main__":
	App()