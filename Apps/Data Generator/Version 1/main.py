"""
The idea to make this app originated simply from
the need of wanting dummy data to practise
data analytics on, I simply wanted a tool
to generate dummy data to play around with


The theme colors were generated by coolors.co


Contributors:
@SupremeCoder177 - github.com 
"""

# main file to handle all the API of this app

import customtkinter as ctk
from json import load
from darkdetect import isDark
from utils.console import Console
from utils.tableView import TableView
from utils.mainPanel import MainPanel
from utils.animations import Animations
from utils.sidePanel import SidePanel
from tkinter import filedialog, messagebox
import threading


# main app class
class App(ctk.CTk):

	# initializing the window and its components
	def __init__(self):

		if self.load_data():
			print("Settings loaded sucessfully, loading components...")
		else:
			print("Couldn't load settings, exiting...")
			return

		# initializing tkinter and settings title
		super().__init__()
		self.title("CSV Data Generator")

		# variables
		self.theme = "light" # usually I go with the dark theme mode as default, but this apps light mode is really good :)

		ctk.set_appearance_mode(self.theme)

		# settings the theme, if the them file is not present, then using default customtkiner themes
		try:
			ctk.set_default_color_theme("settings/theme.json")
			print("sucessfully set custom theme")
		except FileNotFoundError as e:
			print("Couldn't load theme settings")

		# setting window dimensions and position
		x = (self.winfo_screenwidth() - self.settings["app_size"][0]) // 2
		y = (self.winfo_screenheight() - self.settings["app_size"][1]) // 2
		self.geometry(f"{self.settings["app_size"][0]}x{self.settings["app_size"][1]}+{x}+{y}")

		# adding widgets

		# adding the console
		self.console = Console(self, self.settings)

		# adding the table view
		self.view = TableView(self, self.settings)

		# adding the side panel
		self.side_panel = SidePanel(self, self.settings, self.console)

		# adding the main panel
		self.main_panel = MainPanel(self, self.settings, self.console)

		# raising the side_panel above the main panel
		self.side_panel.tkraise()

		# adding a theme toggle button
		ctk.CTkButton(self,
			text = "T",
			command = self.theme_toggle,
			corner_radius = 0).place(relx = 0.95, rely = 0.95, relwidth = 0.05, relheight = 0.05)

		self.bind("<Escape>", lambda event: self.quit_app())
		self.mainloop()

	# animates the console with a generating... text animation
	def animate_generation(self):
		Animations().animate_text(self.console, "Generating",  "Generating.........", ".", 2000)
		self.after(2000, self.animate_generation)

	# adds a thread to the active threads
	def add_thread(self, target):
		temp = threading.Thread(target = target)
		temp.daemon = True
		temp.start()

	# prompts the user if they want to close the app
	# if some background threads are still running
	# else just quit normally
	def quit_app(self):
		if threading.active_count() == 1:
			self.quit()
		else:
			if messagebox.askokcancel(title = "Are you Sure?",message = "Some background tasks are still running, do you still wanna quit?"): self.quit()

	# loads the json file which contains the app settings
	# the app will not start if the json file is missing
	# or the file doesn't have the necessary settings for the
	# app to function
	def load_data(self) -> bool:
		try:
			with open("settings/settings.json", "r") as f:
				self.settings = load(f)
			return True
		except FileNotFoundError as e:
			return False

	# function to change the theme of the app from light to dark mode, or vice-versa
	def theme_toggle(self) -> None:
		self.theme = "dark" if self.theme == "light" else "light"
		ctk.set_appearance_mode(self.theme)

	# retrives the data from the side panel and adds
	# it to the main panel
	def add_column_to_main(self) -> None:
		data = self.side_panel.get_data()
		if data:
			if not self.main_panel.add_column(data["name"], data["type"], data["lower"], data["upper"]):
				self.console.set_text("This Column Already Exists !", 2000, "Change Column Name")
		else:
			self.console.display_warning()


if __name__ == "__main__":
	App()