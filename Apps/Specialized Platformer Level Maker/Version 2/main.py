# Main app file
# run python/python3 -m main to run in terminal
# color template was generated by coolors.co
# all images were drawn by myself in GIMP and Krita

import customtkinter as ctk
from darkdetect import isDark
from tkinter import filedialog
from json import load
from scripts.sidePanel import SidePanel
from scripts.controlPanel import ControlPanel
from scripts.animations import move_frame
from scripts.spriteHandler import SpriteHandler
from scripts.worldPanel import WorldPanel

# main app class
class App(ctk.CTk):

	def __init__(self):
		super().__init__()

		# window settings
		self.theme = "light" if not isDark() else "dark"
		self.title("Level Maker For 2D Games")
		self.geometry(f'{self.winfo_screenwidth()}x{self.winfo_screenheight()}+0+0')
		ctk.set_appearance_mode(self.theme)

		# accessing app settings
		with open("settings.json", "r") as f:
			self.settings = load(f)

		# instantiating the panels
		self.world = WorldPanel(self)
		self.side_panel = SidePanel(self)
		self.control = ControlPanel(self)

		# instantiating the handler and builders and loaders
		self.handler = SpriteHandler(self)

		# binding key controls to window
		self.bind("<Escape>", lambda event: self.quit())
		self.bind("<Alt-KeyPress-Up>", lambda event: self.attributes("-fullscreen", True))
		self.bind("<Alt-KeyPress-Down>", lambda event: self.attributes("-fullscreen", False))

		# running the app
		self.mainloop()

	# toggles app theme from light/dark
	def change_theme(self):
		if self.theme == "light":
			ctk.set_appearance_mode("dark")
			self.theme = "dark"
		else:
			ctk.set_appearance_mode("light")
			self.theme = "light"
		self.world.change_bg()

	# shows/hides the control panel
	def toggle_control(self):
		_from = None
		to = None
		if not self.control.shown:
			_from = self.settings["control_panel_pos"]
			to = self.settings["control_panel_show_pos"]
		else:
			_from = self.settings["control_panel_show_pos"]
			to = self.settings["control_panel_pos"]
		self.control.shown = not self.control.shown
		move_frame(self.control, 200, _from, to, None)

	# loads sprites and updates the display of sprites on side_panel
	def load_sprites(self):
		path = filedialog.askopenfile()
		if path:
			self.handler.get_sprites(path.name)
			self.update_load_sprites()

	# deletes a sprite from loaded ones and updates display on side_panel
	def delete_sprite(self):
		self.handler.delete_sprite()
		self.update_load_sprites()

	# deletes all sprites from loaded and updates display on side_panel
	def delete_all(self):
		self.handler.delete_all()
		self.update_load_sprites()

	# shows an error message on the console in the control_panel
	def show_err(self, msg):
		self.control.console.configure(state = "normal")
		self.control.console.insert('end', f'{msg}\n')
		self.control.console.configure(state = "disabled")

	# updates the display of sprites on side_panel
	def update_load_sprites(self):
		self.side_panel.update(self.handler.sprites)

	# changes cell size if the user gave correct input
	def change_cell_size(self):
		try:
			temp = int(self.control.var.get())
			if temp == self.handler.get_cell_size(): return
			self.handler.change_cell_size(temp)
			self.control.custom.show_msg("Cell Size Has been changed", 3000)
		except Exception as e:
			self.show_err("Please enter only integer values")

	# changes current selected sprite
	def change_curr_sprite(self, tag):
		print(tag)
		self.handler.set_current_sprite(tag)


if __name__ == '__main__':
	App()